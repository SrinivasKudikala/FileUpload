/*
 * Created on 2 May 2019 ( Time 13:53:33 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.toqqer.services.db.telo.dao.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.toqqer.services.db.telo.bean.TqrVideos;
import com.toqqer.services.db.telo.dao.TqrVideosDAO;
import com.toqqer.services.db.telo.dao.impl.jdbc.commons.GenericDAO;

/**
 * TqrVideos DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
public class TqrVideosDAOImpl extends GenericDAO<TqrVideos> implements TqrVideosDAO {

	private final static String SQL_SELECT = 
		"select vid_lib_id, title, vid_name, description, tag, video_duration, thumbnail, cateogrey, user_id, uploaded_time, views, vid_like, vid_dislike, vid_share, downloads, video_fingerprint from tqr_videos where vid_lib_id = ?";

	private final static String SQL_INSERT = 
		"insert into tqr_videos ( title, vid_name, description, tag, video_duration, thumbnail, cateogrey, user_id, uploaded_time, views, vid_like, vid_dislike, vid_share, downloads, video_fingerprint ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update tqr_videos set title = ?, vid_name = ?, description = ?, tag = ?, video_duration = ?, thumbnail = ?, cateogrey = ?, user_id = ?, uploaded_time = ?, views = ?, vid_like = ?, vid_dislike = ?, vid_share = ?, downloads = ?, video_fingerprint = ? where vid_lib_id = ?";

	private final static String SQL_DELETE = 
		"delete from tqr_videos where vid_lib_id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from tqr_videos";

	private final static String SQL_COUNT = 
		"select count(*) from tqr_videos where vid_lib_id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public TqrVideosDAOImpl() {
		super();
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param vidLibId;
	 * @return the new instance
	 */
	private TqrVideos newInstanceWithPrimaryKey( Integer vidLibId ) {
		TqrVideos tqrVideos = new TqrVideos();
		tqrVideos.setVidLibId( vidLibId );
		return tqrVideos ;
	}

	//----------------------------------------------------------------------
	/**
	 * Finds a bean by its primary key 
	 * @param vidLibId;
	 * @return the bean found or null if not found 
	 */
	@Override
	public TqrVideos find( Integer vidLibId ) {
		TqrVideos tqrVideos = newInstanceWithPrimaryKey( vidLibId ) ;
		if ( super.doSelect(tqrVideos) ) {
			return tqrVideos ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param tqrVideos
	 * @return true if found, false if not found
	 */
	@Override
	public boolean load( TqrVideos tqrVideos ) {
		return super.doSelect(tqrVideos) ;
	}
    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param tqrVideos
	 */
	@Override
	public Integer insert(TqrVideos tqrVideos) {
		Long key = super.doInsertAutoIncr(tqrVideos);
		return key.intValue();
	}

    //----------------------------------------------------------------------
	/**
	 * Updates the given bean in the database 
	 * @param tqrVideos
	 * @return
	 */
	@Override
	public int update(TqrVideos tqrVideos) {
		return super.doUpdate(tqrVideos);
	}	

    //----------------------------------------------------------------------
	/**
	 * Deletes the record in the database using the given primary key value(s) 
	 * @param vidLibId;
	 * @return
	 */
	@Override
	public int delete( Integer vidLibId ) {
		TqrVideos tqrVideos = newInstanceWithPrimaryKey( vidLibId ) ;
		return super.doDelete(tqrVideos);
	}

    //----------------------------------------------------------------------
	/**
	 * Deletes the given bean in the database 
	 * @param tqrVideos
	 * @return
	 */
	@Override
	public int delete( TqrVideos tqrVideos ) {
		return super.doDelete(tqrVideos);
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param vidLibId;
	 * @return
	 */
	@Override
	public boolean exists( Integer vidLibId ) {
		TqrVideos tqrVideos = newInstanceWithPrimaryKey( vidLibId ) ;
		return super.doExists(tqrVideos);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param tqrVideos
	 * @return
	 */
	@Override
	public boolean exists( TqrVideos tqrVideos ) {
		return super.doExists(tqrVideos);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, TqrVideos tqrVideos) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, tqrVideos.getVidLibId() ) ; // "vid_lib_id" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected TqrVideos populateBean(ResultSet rs, TqrVideos tqrVideos) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		tqrVideos.setVidLibId(rs.getInt("vid_lib_id")); // java.lang.Integer
		if ( rs.wasNull() ) { tqrVideos.setVidLibId(null); }; // not primitive number => keep null value if any
		tqrVideos.setTitle(rs.getString("title")); // java.lang.String
		tqrVideos.setVidName(rs.getString("vid_name")); // java.lang.String
		tqrVideos.setDescription(rs.getString("description")); // java.lang.String
		tqrVideos.setTag(rs.getString("tag")); // java.lang.String
		tqrVideos.setVideoDuration(rs.getString("video_duration")); // java.lang.String
		tqrVideos.setThumbnail(rs.getString("thumbnail")); // java.lang.String
		tqrVideos.setCateogrey(rs.getString("cateogrey")); // java.lang.String
		tqrVideos.setUserId(rs.getInt("user_id")); // java.lang.Integer
		if ( rs.wasNull() ) { tqrVideos.setUserId(null); }; // not primitive number => keep null value if any
		tqrVideos.setUploadedTime(rs.getTimestamp("uploaded_time")); // java.sql.Timestamp
		tqrVideos.setViews(rs.getInt("views")); // java.lang.Integer
		if ( rs.wasNull() ) { tqrVideos.setViews(null); }; // not primitive number => keep null value if any
		tqrVideos.setVidLike(rs.getInt("vid_like")); // java.lang.Integer
		if ( rs.wasNull() ) { tqrVideos.setVidLike(null); }; // not primitive number => keep null value if any
		tqrVideos.setVidDislike(rs.getInt("vid_dislike")); // java.lang.Integer
		if ( rs.wasNull() ) { tqrVideos.setVidDislike(null); }; // not primitive number => keep null value if any
		tqrVideos.setVidShare(rs.getInt("vid_share")); // java.lang.Integer
		if ( rs.wasNull() ) { tqrVideos.setVidShare(null); }; // not primitive number => keep null value if any
		tqrVideos.setDownloads(rs.getInt("downloads")); // java.lang.Integer
		if ( rs.wasNull() ) { tqrVideos.setDownloads(null); }; // not primitive number => keep null value if any
		tqrVideos.setVideoFingerprint(rs.getString("video_fingerprint")); // java.lang.String
		return tqrVideos ;
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, TqrVideos tqrVideos) throws SQLException {

		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		// "vid_lib_id" is auto-incremented => no set in insert		
		setValue(ps, i++, tqrVideos.getTitle() ) ; // "title" : java.lang.String
		setValue(ps, i++, tqrVideos.getVidName() ) ; // "vid_name" : java.lang.String
		setValue(ps, i++, tqrVideos.getDescription() ) ; // "description" : java.lang.String
		setValue(ps, i++, tqrVideos.getTag() ) ; // "tag" : java.lang.String
		setValue(ps, i++, tqrVideos.getVideoDuration() ) ; // "video_duration" : java.lang.String
		setValue(ps, i++, tqrVideos.getThumbnail() ) ; // "thumbnail" : java.lang.String
		setValue(ps, i++, tqrVideos.getCateogrey() ) ; // "cateogrey" : java.lang.String
		setValue(ps, i++, tqrVideos.getUserId() ) ; // "user_id" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getUploadedTime() ) ; // "uploaded_time" : java.sql.Timestamp
		setValue(ps, i++, tqrVideos.getViews() ) ; // "views" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getVidLike() ) ; // "vid_like" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getVidDislike() ) ; // "vid_dislike" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getVidShare() ) ; // "vid_share" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getDownloads() ) ; // "downloads" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getVideoFingerprint() ) ; // "video_fingerprint" : java.lang.String
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, TqrVideos tqrVideos) throws SQLException {

		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, tqrVideos.getTitle() ) ; // "title" : java.lang.String
		setValue(ps, i++, tqrVideos.getVidName() ) ; // "vid_name" : java.lang.String
		setValue(ps, i++, tqrVideos.getDescription() ) ; // "description" : java.lang.String
		setValue(ps, i++, tqrVideos.getTag() ) ; // "tag" : java.lang.String
		setValue(ps, i++, tqrVideos.getVideoDuration() ) ; // "video_duration" : java.lang.String
		setValue(ps, i++, tqrVideos.getThumbnail() ) ; // "thumbnail" : java.lang.String
		setValue(ps, i++, tqrVideos.getCateogrey() ) ; // "cateogrey" : java.lang.String
		setValue(ps, i++, tqrVideos.getUserId() ) ; // "user_id" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getUploadedTime() ) ; // "uploaded_time" : java.sql.Timestamp
		setValue(ps, i++, tqrVideos.getViews() ) ; // "views" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getVidLike() ) ; // "vid_like" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getVidDislike() ) ; // "vid_dislike" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getVidShare() ) ; // "vid_share" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getDownloads() ) ; // "downloads" : java.lang.Integer
		setValue(ps, i++, tqrVideos.getVideoFingerprint() ) ; // "video_fingerprint" : java.lang.String
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, tqrVideos.getVidLibId() ) ; // "vid_lib_id" : java.lang.Integer
	}

}
